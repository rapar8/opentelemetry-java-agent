services:
  service-layer:
    build:
      context: ./order
      target: "O2-8"
    image: service-layer:latest
    container_name: service-layer
    hostname: service-layer
    depends_on:
      - otel-collector
    ports:
      - "8080:8080"
    networks:
      - inst-java-apps-using-otel
    env_file: otel.env
    environment:
      - OTEL_RESOURCE_ATTRIBUTES="job=order,application=order,service.name=order,service.version=1.0,deployment.environment=development"
      - SERVER_PORT=8080
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8888/test/env

  inventory:
    build:
      context: ./inventory
      target: "O2-8"
    image: inventory:latest
    container_name: inventory
    hostname: inventory
    depends_on:
      - otel-collector
    ports:
      - "8081:8081"
    networks:
      - inst-java-apps-using-otel
    env_file: otel.env
    environment:
      - OTEL_RESOURCE_ATTRIBUTES="job=inventory,application=inventory,service.name=inventory,service.version=1.0,deployment.environment=development"
      - SERVER_PORT=8081
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8888/test/env

  shipping:
    build:
      context: ./shipping
      target: "O2-8"
    image: shipping:latest
    container_name: shipping
    hostname: shipping
    depends_on:
      - otel-collector
    ports:
      - "8082:8082"
    networks:
      - inst-java-apps-using-otel
    env_file: otel.env
    environment:
      - OTEL_RESOURCE_ATTRIBUTES="job=inventory,application=inventory,service.name=shipping,service.version=1.0,deployment.environment=development"
      - SERVER_PORT=8082
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8888/test/env

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    restart: always
    container_name: otel-collector
    hostname: otel-collector
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "5555:5555"
      - "6666:6666"
    networks:
      - inst-java-apps-using-otel

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    container_name: tempo
    hostname: tempo
    volumes:
      - ./o11y-backend/tempo-config.yaml:/etc/tempo/tempo.yaml
      - ./o11y-backend/tempo-overrides.yaml:/etc/tempo/overrides.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    networks:
      - inst-java-apps-using-otel
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3200/status || exit 1

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./o11y-backend/prometheus.yaml:/etc/prometheus/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - inst-java-apps-using-otel
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/status || exit 1

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana 
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    volumes:
      - ./o11y-backend/grafana-bootstrap.ini:/etc/grafana/grafana.ini
      - ./o11y-backend/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_LOG_MODE=console file
      - GF_LOG_LEVEL=info
      - GF_PATHS_LOGS="/var/log/grafana"
    ports:
      - "3000:3000"
    networks:
      - inst-java-apps-using-otel
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

networks:
  inst-java-apps-using-otel:
    driver: bridge
    name: inst-java-apps-using-otel